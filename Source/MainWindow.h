#pragma once

#include <memory>

#include <QMainWindow>
#include <QScrollArea>
#include <QSplitter>
#include <QStandardItem>
#include <QTableView>
#include <QVBoxLayout>

#include "Common.h"
#include "File.h"
#include "Nodes/Node.h"

namespace Ui
{
class MainWindow;
}

/// @brief Represents the main program interface window for Qt.
///
/// See @ref qtfrontendoverview "this" for more info.
///
/// @todo In the update slots, the mechanism for swapping out widgets in the QSplitters could be
/// much better.
class MainWindow : public QMainWindow
{
  Q_OBJECT

public:
  /// Initializes a new instance of the MainWindow class.
  ///
  /// @param  parent  The pointer to the parent widget.
  explicit MainWindow(QWidget* parent = 0);
  /// Uninitializes an instance of the MainWindow class.
  ~MainWindow();

private:
  /// The Qt UI interface. This ties in with the output generated by the uic tool.
  Ui::MainWindow* m_ui = nullptr;

  /// The editor view. See: @ref qtfrontendeditorview.
  QSplitter* m_horizontal_splitter = nullptr;
  /// The file explorer widget. See: @ref qtfrontendeditorview.
  QSplitter* m_vertical_splitter = nullptr;
  /// The top level node of the file explorer.
  std::unique_ptr<Node> m_root_node;

  /// The main file to read from.
  std::shared_ptr<File> m_file;

private slots:
  /// Opens a file, and loads the node tree area and attribute area for the root node.
  ///
  /// @param  path    The path to load the file from. This is only used for debugging purposes,
  /// and can be omitted. When omitted, a QFileDialog instead will appear.
  void OpenFile(const QString& path = QString());

  /// For a given node, allows it to upload widgets to the editor view.
  ///
  /// @param  node  The node to make connections for.
  void MakeNodeConnections(Node* node);
  /// Uploads a new file tree area to the editor view.
  ///
  /// @param  area  The new file tree area.
  void UpdateFileTreeContainer(QScrollArea* area);
  /// Uploads a new attribute area to the editor view.
  ///
  /// @param  area  The new attribute area.
  void UpdateAttributeContainer(QScrollArea* area);
  /// Uploads a new main widget to the editor view.
  ///
  /// @param  widget  The new main widget.
  void UpdateMainWidget(QWidget* widget);
  /// Uploads a new status to the window, and optionally display a message box.
  ///
  /// @param  status  The status, either:
  /// - ResultCode::Success for success. This just changes the status bar.
  /// - ResultCode::UpdateStatusBar for a neutral status update. This just changes the status bar.
  /// - Anything else for an error. This changes the status bar, and displays an error message box.
  /// @param  details The status update string, if ResultCode::UpdateStatusBar was specified.
  void UpdateStatus(ResultCode status, const QString& details = QString());
};
